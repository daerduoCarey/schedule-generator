package database;

/**
 * This is an interface to declare that an object can be stored into its own
 * table of the database<br>
 * <ul>
 * <lh>Class requirements for correctly implementing the interface are:</lh>
 * <li>a constructor with no arguments must be present</li>
 * <li>all objects of the class must have a parameter of the Class {@link ID}<br>
 * The getter and setter for 'ID' are supplied by this interface</li><br>
 * This actual value for ID is automatically generated by the interface.
 * <li>getter methods of parameters to be stored in the database have to be annotated with {@link InDatabase @InDatabase}<br>
 * A getter method can't have any input parameters</li>
 * <li>setter methods of parameters to be read from the database have to be annotated with {@link OutDatabase @OutDatabase}<br>
 * If the return type of the setter is a Vector, then the Class of the class of the return type must be added to the OutDatabase annotation. See {@link OutDatabase @OutDatabase} for supported types<br>
 * A setter method has exactly one parameter, namely the value of the field to set</li>
 * <li>the name of the getter method starts with 'get' or 'is' (usually for <code>booleans</code>)<br>
 * 'get' and 'is' cannot be used both for the same field<br>
 * This means <code>getXXX</code> combined with <code>isXXX</code> in the same class is invalid.<br>
 * but '<code>getXXX</code>' and '<code>isYYY</code>' (where <code>XXX!=YYY</code>) is of course valid</li>
 * <li>the name of the setter method starts with 'set'</li>
 * <li>each setter must be accompanied by a getter with the same name, ie '<code>setXXX</code>' and '<code>getXXX</code>' (or '<code>isXXX</code>')</li>
 * <li>Do not use names such as getInteger, setBoolean, etc. as these words will interfere with the MySQL syntax</li>
 * <li>the 'getID' and 'setID' methods supplied by this interface must <b>not</b> be annotated with 'outDatabase' and 'inDatabase'</li><br><br>
 * </ul>
 * 
 * @author Zjef
 * @version 2.0
 * @see InDatabase
 * @see OutDatabase
 */
public interface Databasable extends DatabasableObject
{
	public static final String getter="getID", setter="setID";

	/**
	 * Required method for implementing {@link Databasable}.<br>
	 * @return unique ID of the object in the database
	 */
	public ID getID();

	/**
	 * Required method for implementing {@link Databasable}.<br>
	 * 
	 * @param ID - unique ID of the object in the database
	 */
	public void setID(ID id);
}